{
    "train_loss": [
        1.6139516653612143,
        0.9944494147129985,
        0.6998904646967378,
        0.5472102969351327,
        0.37730830938309967,
        0.22966740202263494,
        0.17249054377874756,
        0.10634489986769226,
        0.10933960661711291,
        0.06678728371515603,
        0.06954550654972758,
        0.15235603545003992,
        0.07399391267886933,
        0.06384405025931271,
        0.07841285291697135,
        0.056303099912526966,
        0.04274520336303746,
        0.07075664657227637,
        0.041211290970680485,
        0.031207229209649363
    ],
    "train_accuracy": [
        45.202,
        65.308,
        74.948,
        80.696,
        86.722,
        92.182,
        94.07,
        96.36,
        96.098,
        97.748,
        97.634,
        95.074,
        97.402,
        97.83,
        97.238,
        98.08,
        98.53,
        97.678,
        98.634,
        98.986
    ],
    "test_loss": [
        1.6297215012055408,
        1.073876367339605,
        0.8295673660085171,
        0.711169852108895,
        0.6524485379834718,
        0.6031414425071282,
        0.6577836169472223,
        0.7129481483863879,
        0.8225222471394117,
        0.7396032168895383,
        0.8440319307242767,
        0.9965634459181677,
        0.9546701259250883,
        1.028365216677702,
        1.0631096195193785,
        0.9400975564612618,
        0.9889001240835914,
        1.1102098000200489,
        1.040060043334961,
        0.9858069476034916
    ],
    "test_accuracy": [
        44.71,
        63.23,
        70.64,
        75.66,
        77.95,
        80.04,
        80.08,
        81.0,
        79.76,
        81.19,
        80.82,
        78.92,
        80.71,
        79.71,
        80.09,
        80.69,
        81.92,
        80.03,
        80.61,
        81.74
    ],
    "path_norm": [
        113.58671315893422,
        3632.732717941137,
        36973.88483781492,
        189260.82337345995,
        720149.2495976095,
        2243106.0668492694,
        6169831.394166943,
        12453599.538839845,
        20709161.315342925,
        34058432.85381357,
        48642280.42687933,
        70726575.99277352,
        93910063.82848884,
        124913090.2074602,
        165658169.47341463,
        233527850.68733618,
        296133391.98258555,
        343497914.94229174,
        440369501.8925614,
        565678113.4400628
    ],
    "model": "CifarResNet(\n  (conv1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (relu): ReLU(inplace=True)\n  (maxpool): Identity()\n  (layer1): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (layer2): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n  )\n  (layer3): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n  )\n  (layer4): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n  )\n  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n  (fc): Linear(in_features=512, out_features=10, bias=True)\n)"
}