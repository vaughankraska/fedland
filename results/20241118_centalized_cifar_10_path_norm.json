{
    "train_loss": [
        1.8837872972268888,
        0.9687939438673542,
        0.636978638294103,
        0.6802424132214178,
        0.48177271734570604,
        0.25965256390669156,
        0.5571996131364036,
        0.1852401734313087,
        0.07045628203322059,
        0.02869082129110232,
        0.003130327870436918,
        0.0008254683013949448,
        0.0005217692042883161,
        0.00041628289991445466,
        0.0003356457800086935,
        0.0002810957091574645,
        0.0002575200655104002,
        0.0002192186033207318,
        0.00020208192461937228,
        0.00018200820648049473
    ],
    "train_accuracy": [
        44.246,
        66.05,
        76.648,
        77.136,
        83.408,
        90.998,
        81.848,
        93.462,
        97.744,
        99.168,
        99.992,
        100.0,
        100.0,
        100.0,
        100.0,
        100.0,
        100.0,
        100.0,
        100.0,
        100.0
    ],
    "test_loss": [
        1.9610942768145212,
        1.1151471507700184,
        0.8657056832615333,
        1.0533204388014878,
        0.9480804619909842,
        0.832968637158599,
        1.4055892734587947,
        1.0209349733364732,
        0.9254824949216239,
        0.996660971188847,
        0.8330384694228444,
        0.8279702157913884,
        0.8458330348322664,
        0.8359033308828934,
        0.8529594782032545,
        0.8723189740241328,
        0.8683493077000485,
        0.8659552501726754,
        0.8763486086567746,
        0.8841698860065846
    ],
    "test_accuracy": [
        42.82,
        61.39,
        69.98,
        68.55,
        71.33,
        75.38,
        66.42,
        73.53,
        76.41,
        77.68,
        80.2,
        80.8,
        80.99,
        81.09,
        81.06,
        80.97,
        80.97,
        81.08,
        81.07,
        81.04
    ],
    "path_norm": [
        66.66985547386652,
        83.16978645461494,
        102.71326898215244,
        128.80917177893429,
        161.35397568312348,
        197.2658422028507,
        230.53872878271451,
        259.44700807679396,
        283.7597189965482,
        300.843839267152,
        307.47053974730653,
        314.26247986356884,
        316.86005881934693,
        319.10294185419224,
        320.92292444993706,
        323.1533957542455,
        325.33552392107447,
        326.4624428054474,
        326.4260779640622,
        328.92193697745364
    ],
    "model": "CifarResNet(\n  (conv1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (relu): ReLU(inplace=True)\n  (maxpool): Identity()\n  (layer1): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (layer2): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n  )\n  (layer3): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n  )\n  (layer4): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n  )\n  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n  (fc): Linear(in_features=512, out_features=10, bias=True)\n)"
}